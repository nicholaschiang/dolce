@tailwind base;
@tailwind components;
@tailwind utilities;
@tailwind variants;

@layer base {
  /* optimize legibility; see https://rauno.me/interfaces */
  body,
  html {
    text-rendering: optimizeLegibility;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    -moz-text-size-adjust: none;
  }

  /* hide image alt text; see https://stackoverflow.com/a/37192970 */
  img[alt]:after {
    @apply absolute inset-0 flex h-full w-full items-center justify-center bg-inherit text-center text-xs;
    content: attr(alt);
  }

  /* hide outline on focus */
  :focus {
    outline: none;
  }
}

@layer utilities {
  /* override the default backdrop filter order that TailwindCSS provides */
  .backdrop-order {
    backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-saturate)
      var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale)
      var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)
      var(--tw-backdrop-opacity) var(--tw-backdrop-brightness)
      var(--tw-backdrop-sepia);
  }

  /* center absolutely and fixed positioned elements */
  .center {
    @apply top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2;
  }
}

/* FIXME instead of defining this as a reusable TailwindCSS class, this should
 * be defined in a reusable <IconButton> wrapper. However, dealing with TS types
 * wasn't worth it for now; this was a lot easier.
 */
@layer components {
  .icon-button {
    @apply flex h-6 w-6 cursor-pointer items-center justify-center rounded-full text-gray-900/40 transition-colors disabled:cursor-not-allowed dark:text-gray-100/40;
    &:not(:disabled):hover,
    &:not(:disabled):focus {
      @apply bg-gray-900/5 text-gray-900 dark:bg-gray-100/5 dark:text-gray-100;
    }
    &:disabled {
      @apply cursor-not-allowed text-gray-900/20 dark:text-gray-100/20;
    }
  }

  .button {
    @apply h-8 rounded border px-2 transition-colors;
    &:not(.outlined) {
      @apply border-gray-900 bg-gray-900 text-white dark:border-white dark:bg-white dark:text-gray-900;
      &:not(:disabled):hover,
      &:not(:disabled):focus {
        @apply bg-transparent text-gray-900 dark:bg-transparent dark:text-white;
      }
    }
    &.outlined {
      @apply border-gray-200 bg-gray-100/50 text-gray-900 dark:border-gray-700 dark:bg-gray-800/50 dark:text-gray-100;
      &:not(:disabled):hover,
      &:not(:disabled):focus {
        @apply border-gray-300 bg-gray-200/50 dark:border-gray-600 dark:bg-gray-700/50;
      }
    }
  }

  .input {
    @apply h-8 w-full appearance-none rounded border border-gray-200 bg-white px-3 outline-none transition-colors dark:border-gray-700 dark:bg-gray-900;
    &:not(:disabled):hover,
    &:not(:disabled):focus {
      @apply border-gray-300 dark:border-gray-600;
    }
  }

  .frosted {
    @apply backdrop-order dark:backdrop-order bg-white/75 backdrop-blur-md backdrop-brightness-150 backdrop-contrast-50 backdrop-saturate-200 dark:bg-gray-900/75 dark:backdrop-brightness-75 dark:backdrop-contrast-75;
  }

  .underline {
    @apply decoration-1 underline-offset-1;
    &.link {
      @apply decoration-gray-900/40 transition-colors hover:decoration-gray-900 dark:decoration-gray-100/40 dark:hover:decoration-gray-100;
    }
  }
}

@supports (scrollbar-width: thin) {
  * {
    scrollbar-width: thin;
    scrollbar-color: theme('colors.gray.100') theme('colors.white');
  }

  .light,
  .light * {
    scrollbar-color: theme('colors.gray.100') theme('colors.white');
  }

  .dark,
  .dark * {
    scrollbar-color: theme('colors.gray.800') theme('colors.gray.900');
  }
}
